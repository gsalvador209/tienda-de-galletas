"""add column for product type

Revision ID: 0884928a61e1
Revises: 6f428f73de89
Create Date: 2025-05-16 17:32:07.963138

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import enum

class ProductType(enum.Enum):
    cupcake = "cupcake"
    galleta = "galleta"
    pastel = "pastel"
    
# revision identifiers, used by Alembic.
revision: str = '0884928a61e1'
down_revision: Union[str, None] = '6f428f73de89'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('products') as batch_op:
        batch_op.add_column(
            sa.Column(
                'type',
                sa.Enum(ProductType, name='producttype'),  # Give it a name
                nullable=False,
                server_default='cupcake'  # default required for SQLite
            )
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('products') as batch_op:
        batch_op.drop_column('type')

    # Optionally drop enum type in databases that support named enums (e.g., PostgreSQL)
    op.execute('DROP TYPE IF EXISTS producttype')
    # ### end Alembic commands ###
